{"version":3,"sources":["Context/ThemeContext.js","Components/ThemeToggler.js","Components/Header.js","Colors.js","Components/HeroSection.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContext","createContext","ThemeToggler","useContext","themeMode","setThemeMode","onClick","Header","AppTheme","light","textColor","backgroundColor","border","dark","HeroSection","theme","currentTheme","style","padding","color","fontSize","App","themeHook","useState","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0IAIeA,G,KAFMC,wBAAc,CAAC,QAAS,gB,OCkB9BC,EAjBM,WAAO,IAAD,EACWC,qBAAWH,GADtB,mBAChBI,EADgB,KACLC,EADK,KAE3B,OACI,yBAEAC,QAAU,WAEND,EAA2B,UAAbD,EAAyB,OAAW,WAE1D,8BACkB,UAAbA,EAAuB,cAAgB,kBCA7BG,EATA,WACf,OACI,gCACI,qCACA,kBAAC,EAAD,QCKSC,EAbA,CACbC,MAAO,CACLC,UAAW,OACXC,gBAAiB,OACjBC,OAAQ,kBAEVC,KAAM,CACJH,UAAW,OACXC,gBAAiB,OACjBC,OAAQ,oBCsBCE,EA1BK,WACpB,IAAMC,EAAQZ,qBAAWH,GAAc,GACjCgB,EAAeR,EAASO,GAE9B,OACI,yBACAE,MAAO,CACHC,QAAQ,OACRP,gBAAgB,GAAD,OAAIK,EAAaL,iBAChCQ,MAAM,GAAD,OAAIH,EAAaN,aAEtB,yDACA,0DACA,4BAAQO,MAAO,CACvBN,gBAAgB,UAChBO,QAAQ,aACRE,SAAS,OACTD,MAAM,OACNP,OAAO,GAAD,OAAII,EAAaJ,UALf,cCDOS,EAZH,WACZ,IAAMC,EAAYC,mBAAS,QAC3B,OACE,kBAAC,EAAaC,SAAd,CAAuBC,MAAOH,GAChC,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCCkBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3c00c084.chunk.js","sourcesContent":["import {createContext} from \"react\"\r\n\r\nconst ThemeContext = createContext([\"light\", () => {}]);\r\n\r\nexport default ThemeContext;","import React, {useContext} from \"react\";\r\nimport ThemeContext from \"../Context/ThemeContext\"\r\n\r\nconst ThemeToggler = () => {\r\n    const [themeMode, setThemeMode] = useContext(ThemeContext)\r\nreturn(\r\n    <div \r\n    \r\n    onClick= {() =>\r\n    {\r\n        setThemeMode (themeMode=== \"light\"  ?  \"dark\"  :  \"light\")\r\n    }}>\r\n<span>\r\n    {themeMode=== \"light\" ? \"light is on\" : \"light is off\"}\r\n</span>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default ThemeToggler;\r\n\r\n\r\n\r\n","import React from \"react\"\r\n\r\nimport ThemeToggler from \"./ThemeToggler\"\r\n\r\nconst Header = () =>{\r\nreturn(\r\n    <header>\r\n        <h1>Theme</h1>\r\n        <ThemeToggler/>\r\n    </header>\r\n)\r\n}\r\n\r\nexport default Header;","const AppTheme = {\r\n    light: {\r\n      textColor: \"#000\",\r\n      backgroundColor: \"#FFF\",\r\n      border: \"2px solid #000\"\r\n    },\r\n    dark: {\r\n      textColor: \"#fff\",\r\n      backgroundColor: \"#333\",\r\n      border: \"2px dashed #000\"\r\n    }\r\n  };\r\n  \r\n  export default AppTheme;","import React, {useContext} from \"react\"\r\nimport ThemeContext from \"../Context/ThemeContext\"\r\nimport AppTheme from \"../Colors\"\r\n\r\n\r\nconst HeroSection = () => {\r\nconst theme = useContext(ThemeContext)[0]\r\nconst currentTheme = AppTheme[theme]\r\n\r\nreturn(\r\n    <div\r\n    style={{\r\n        padding:\"1rem\",\r\n        backgroundColor:`${currentTheme.backgroundColor}`,\r\n        color:`${currentTheme.textColor}`\r\n    }}>\r\n        <h1>Context Api Theme Toggler</h1>\r\n        <p>This is a nice array graph </p>\r\n        <button style={{\r\nbackgroundColor:\"#26ae60\",\r\npadding:\"10px 150px\",\r\nfontSize:\"20px\",\r\ncolor:\"#fff\",\r\nborder:`${currentTheme.border}`\r\n        }}>Click Me</button>\r\n    </div>\r\n)\r\n\r\n\r\n}\r\n\r\nexport default HeroSection;","import React, {useState} from 'react';\nimport ThemeContext from \"./Context/ThemeContext\"\nimport Header from \"./Components/Header\"\nimport HeroSection from  \"./Components/HeroSection\"\n\nconst App = () => {\nconst themeHook = useState(\"dark\")\nreturn(\n  <ThemeContext.Provider value={themeHook}>\n<div>\n  <Header/>\n  <HeroSection/>\n</div>\n  </ThemeContext.Provider>\n)\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}